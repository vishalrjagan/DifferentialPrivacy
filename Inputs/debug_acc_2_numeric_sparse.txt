-10 10
input int q0 -2 2;
input int q1 -2 2;
int out0_det;
out0_det = 0;
real out0_rand;
bool out0_det_is_bot;
out0_det_is_bot = true;
bool out0_rand_is_bot;
out0_rand_is_bot = true;
bool compare0_det;
bool compare0_rand;
int out1_det;
out1_det = 0;
real out1_rand;
bool out1_det_is_bot;
out1_det_is_bot = true;
bool out1_rand_is_bot;
out1_rand_is_bot = true;
bool compare1_det;
bool compare1_rand;

bool t;
bool f;
t = true;
f = false;

int one;
one = 1;
int zero;
zero = 0;
int c;
c = 1;
int count_det;
count_det = 0;
int count_rand;
count_rand = 0;
bool done_det;
bool done_rand;
bool not_done_det;
bool not_done_rand;
bool done_both;
bool done_only_det;
bool done_only_rand;
bool done_one;
bool done_none;
bool conjunct1;
bool conjunct2;
bool conjunction;
bool not_conjunction;
int thresh;
thresh = 0;
int gamma;
gamma = 1;
real noisy_thresh0;
noisy_thresh0 = Lap "( 4 * eps ) / ( 9 * c )" thresh;
done_det = count_det >= c;
done_rand = count_rand >= c;
not_done_det = ! done_det;
not_done_rand = ! done_rand;
done_both = done_det && done_rand;
done_only_det = done_det && not_done_rand;
done_only_rand = not_done_det && done_rand;
done_one = done_only_det || done_only_rand;
done_none = not_done_det && not_done_rand;
if done_both then
return one;
fi;
compare0_det = q0 >= thresh;
if compare0_det then
out0_det = q0;
out0_det_is_bot = false;
count_det = count_det + one;
fi;
real noisy_q0;
noisy_q0 = Lap "eps / ( 9 * c )" q0;
compare0_rand = noisy_q0 >= noisy_thresh0;

out0_rand = noisy_q0;

if compare0_rand then

out0_rand_is_bot = false;
count_rand = count_rand + one;
real noisy_thresh1;
noisy_thresh1 = Lap "( 4 * eps ) / ( 9 * c )" thresh;
fi;
bool not_out0_det_is_bot;
bool not_out0_rand_is_bot;
not_out0_det_is_bot = ! out0_det_is_bot;
not_out0_rand_is_bot = ! out0_rand_is_bot;
bool only_one_is_bot0;
bool only_det_is_bot0;
bool only_rand_is_bot0;
only_det_is_bot0 = out0_det_is_bot && not_out0_rand_is_bot;
only_rand_is_bot0 = out0_rand_is_bot && not_out0_det_is_bot;
only_one_is_bot0 = only_det_is_bot0 || only_rand_is_bot0;
if only_one_is_bot0 then
return zero;
fi;
bool both_are_not_bot0;
both_are_not_bot0 = not_out0_det_is_bot && not_out0_rand_is_bot;
if both_are_not_bot0 then
int minus_gamma0;
minus_gamma0 = out0_det - gamma;
int plus_gamma0;
plus_gamma0 = out0_det + gamma;
real cast_minus0;
real cast_plus0;
cast_minus0 = minus_gamma0;
cast_plus0 = plus_gamma0;
conjunct1 = out0_rand >= cast_minus0;
conjunct2 = out0_rand <= cast_plus0;
conjunction = conjunct1 && conjunct2;
not_conjunction = ! conjunction;
if not_conjunction then
return zero;
fi;
fi;
done_det = count_det >= c;
done_rand = count_rand >= c;
not_done_det = ! done_det;
not_done_rand = ! done_rand;
done_both = done_det && done_rand;
done_only_det = done_det && not_done_rand;
done_only_rand = not_done_det && done_rand;
done_one = done_only_det || done_only_rand;
done_none = not_done_det && not_done_rand;
if done_both then
return one;
fi;
compare1_det = q1 >= thresh;
if compare1_det then
out1_det = q1;
out1_det_is_bot = false;
count_det = count_det + one;
fi;
real noisy_q1;
noisy_q1 = Lap "eps / ( 9 * c )" q1;
compare1_rand = noisy_q1 >= noisy_thresh1;

out1_rand = noisy_q1;

if compare1_rand then
out1_rand_is_bot = false;
count_rand = count_rand + one;
real noisy_thresh2;
noisy_thresh2 = Lap "( 4 * eps ) / ( 9 * c )" thresh;
fi;
bool not_out1_det_is_bot;
bool not_out1_rand_is_bot;
not_out1_det_is_bot = ! out1_det_is_bot;
not_out1_rand_is_bot = ! out1_rand_is_bot;
bool only_one_is_bot1;
bool only_det_is_bot1;
bool only_rand_is_bot1;
only_det_is_bot1 = out1_det_is_bot && not_out1_rand_is_bot;
only_rand_is_bot1 = out1_rand_is_bot && not_out1_det_is_bot;
only_one_is_bot1 = only_det_is_bot1 || only_rand_is_bot1;
if only_one_is_bot1 then
return zero;
fi;
bool both_are_not_bot1;
both_are_not_bot1 = not_out1_det_is_bot && not_out1_rand_is_bot;
if both_are_not_bot1 then
int minus_gamma1;
minus_gamma1 = out1_det - gamma;
int plus_gamma1;
plus_gamma1 = out1_det + gamma;
real cast_minus1;
real cast_plus1;
cast_minus1 = minus_gamma1;
cast_plus1 = plus_gamma1;
conjunct1 = out1_rand >= cast_minus1;
conjunct2 = out1_rand <= cast_plus1;
conjunction = conjunct1 && conjunct2;
not_conjunction = ! conjunction;
if not_conjunction then
return zero;
fi;
fi;
return one;
