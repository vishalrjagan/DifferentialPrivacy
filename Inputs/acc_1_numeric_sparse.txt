-10 10
input int q0 -1 1;
int out0_det;
out0_det = 0;
real out0_rand;
bool out0_det_is_bot;
out0_det_is_bot = true;
bool out0_rand_is_bot;
out0_rand_is_bot = true;
bool compare0_det;
bool compare0_rand;

int one;
one = 1;
int zero;
zero = 0;
int c;
c = 1;
int count_det;
count_det = 0;
int count_rand;
count_rand = 0;
bool done_det;
bool done_rand;
bool not_done_det;
bool not_done_rand;
bool done_both;
bool done_only_det;
bool done_only_rand;
bool done_one;
bool done_none;
int thresh;
thresh = 0;
real gamma;
gamma = 0;
real noisy_thresh0;
noisy_thresh0 = Lap "( 9 * c ) / ( 4 * eps )" thresh;
done_det = count_det >= c;
done_rand = count_rand >= c;
not_done_det = ! done_det;
not_done_rand = ! done_rand;
done_both = done_det && done_rand;
done_only_det = done_det && not_done_rand;
done_only_rand = not_done_det && done_rand;
done_one = done_only_det || done_only_rand;
done_none = not_done_det && not_done_rand;
if done_both then
return one;
fi;
compare0_det = q0 >= thresh;
if compare0_det then
out0_det = q0;
out0_det_is_bot = false;
count_det = count_det + one;
fi;
real noisy_q0;
noisy_q0 = Lap "( 9 * c ) / ( 2 * eps )" q0;
compare0_rand = noisy_q0 >= noisy_thresh0;
if compare0_rand then
out0_rand = noisy_q0;
out0_rand_is_bot = false;
count_rand = count_rand + one;
real noisy_thresh1;
noisy_thresh1 = Lap "( 9 * c ) / ( 4 * eps )" thresh;
fi;
bool not_out0_det_is_bot;
bool not_out0_rand_is_bot;
not_out0_det_is_bot = ! out0_det_is_bot;
not_out0_rand_is_bot = ! out0_rand_is_bot;
bool only_one_is_bot0;
bool only_det_is_bot0;
bool only_rand_is_bot0;
only_det_is_bot0 = out0_det_is_bot && not_out0_rand_is_bot;
only_rand_is_bot0 = out0_rand_is_bot && not_out0_det_is_bot;
only_one_is_bot0 = only_det_is_bot0 || only_rand_is_bot0;
if only_one_is_bot0 then
return zero;
fi;
bool both_are_not_bot0;
both_are_not_bot0 = not_out0_det_is_bot && not_out0_rand_is_bot;
if both_are_not_bot0 then
real cast_det0;
cast_det0 = out0_det;
real minus_gamma0;
minus_gamma0 = cast_det0 - gamma;
real plus_gamma0;
plus_gamma0 = cast_det0 + gamma;
bool conjunct1;
conjunct1 = noisy_q0 > minus_gamma;
conjunct2 = noisy_q0 < plus_gamma;
bool conjunction;
conjunction = conjunct1 && conjunct2;
bool not_conjunction;
not_conjunction = ! conjunction;
if not_conjunction then
return zero;
fi;
fi;
return one;
